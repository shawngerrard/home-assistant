#+title: Home Assistant Setup Instructions

This will take us through the steps of setting up Home Assistant on Ubuntu Server.


** Prerequisites

To use these instructions, you'll need Ubuntu Server installed on a machine, as well as SSH access (OpenSSH) to the server.

You'll need to install the following tools to use this repository:

#+begin_quote
*Note*: If using my [[https://github.com/shawngerrard/ubuntu-tooling/][ubuntu-tool setup]], these tools should already be installed/configured.
#+end_quote

- [[https://www.gnu.org/software/gawk/][GAWK]]
- [[https://nmap.org/][NMAP]]
- [[https://www.pulumi.com/docs/install/][Pulumi CLI]]
- [[https://github.com/nvm-sh/nvm?tab=readme-ov-file#installing-and-updating][NVM]]
- [[https://www.npmjs.com/][NPM]] and [[https://nodejs.org/en][Node]]
- [[https://www.typescriptlang.org/][Typescript]]
- [[https://www.npmjs.com/package/ts-node][TS-Node]]

** Specification

I'm running Home Assistant on the following specs:
  - Raspberry Pi model 4b
  - Ubuntu Server 64-bit LTS 22.04
  - 3TB SSD mounted storage volume

*** Future updates:

***** TODO Administer infra stack with Pulumi configuration
***** TODO Change from single node infra to multi-node for high-availability.
***** TODO Replace Raspberry Pi with more powerful server hardware.
***** TODO Replace Ubuntu Server with RedHat Enterprise Linux (RHEL).

** Infrastructure deployment

*** Scaffold and configuration

We must first create and configure the ~typescript~ pulumi project that will be used to install our infrastructure applications (E.G - ~k3s~, ~helm~, etc).

**** New project

We can create and configure our stack by passing in the ~--config~ parameter to the ~pulumi new~ command, as follows:

#+begin_quote
*Note*: Makes sure you run the following command in the correct (sub-)folder.
#+end_quote

#+begin_src bash
# Create the pulumi project and pass in configuration key/value pairs
pulumi new typescript --name "infra-k3s" \
    --stack "dev" \
    --secret \
    --config="serverKey=$(cat /path/to/private/ssh/key)" \
    --config="serverIp=$(nmap -n -A <server hostname> -oG - | awk '/Up$/{print $2}')" \
    --config="serverUser=<server username>"
#+end_srcg

#+begin_quote
*Note*: This will create a new typescript pulumi project named ~home-assistant~, a stack named ~dev~, and a configuration file (~Pulumi.dev.yaml~) containing the server SSH key for remote connection as well as the IP address (obtained from ~nmap~) of the server.
#+end_quote

**** Existing project

First, we must clone our project from the repository:

#+begin_src bash
git clone git@github.com:shawngerrard/home-assistant.git ~/documents/
#+end_src

Then, we must initialise the stack:

#+begin_src bash
cd ~/documents/home-assistant/infra-k3s && pulumi stack init myhome/dev
#+end_src

Finally, we need to populate our pulumi configuration file:

#+begin_src bash
cat ~/path/to/ssh/private/key | pulumi config set --secret serverKey
nmap -n -A <server hostname> -oG - | awk '/Up$/{print $2}' | pulumi config set serverIp
pulumi config set serverUser <user name>
#+end_src

*** Deployment

With the infrastructure to deploy defined within the project (typically ~index.ts~), we can deploy our ~infra-k3s~ suite.

#+begin_src bash
# Deploy the pulumi dev stack
pulumi up -y
#+end_src

** Home Assistant deployment

*** Scaffold and configuration

Once the ~infra-k3s~ stack is up, we're ready to deploy our ~app-homeassistant~ application.

**** Existing project

First, we must initialise the stack:

#+begin_src bash
cd ~/documents/home-assistant/app-homeassistant && pulumi stack init myhome/dev
#+end_src

Next, set the configuration we need for this stack.

#+begin_src bash
cat ~/path/to/ssh/private/key | pulumi config set --secret serverKey
pulumi config set org myhome
pulumi config set serverStack infra-k3s
#+end_src

*** Deployment

With the applications to deploy defined within the project (typically ~index.ts~), we can deploy our ~app-homeassistant~ suite.

#+begin_src bash
# Deploy the pulumi dev stack
pulumi up -y
#+end_src


** Install Docker

To start with, we'll be running our Home Assistant application in a Docker container.

To install Docker, consult the official Docker [[https://docs.docker.com/engine/install/ubuntu/][installation instructions]] for Ubuntu.

For reference: I've installed Docker using their ~apt~ repository.

#+begin_quote
This Docker installation requires root privileges to run Docker containers. To run Docker containers as a non-root user, follow the official Docker [[https://docs.docker.com/engine/install/linux-postinstall/][Linux post-installation instructions]].
#+end_quote

#+begin_quote
Any OCI (Open Container Initiative) compatible runtime can be used to run a Home Assistant container.
#+end_quote

*** Future updates:

***** TODO Replace Docker with a single-node Kubernetes cluster.
***** TODO Install RedHat OpenShift (RHOS) over the top of Kubernetes to better orchestrate the platform.

** Create a Home Assistant Docker container

With Docker installed, we can start Home Assistant in an OCI (Open Container Initiatie) container.

#+begin_src sh :shebang "#!/bin/bash" :notangle
docker run -d \
  --name homeassistant \
  --privileged \
  --restart=unless-stopped \
  -e TZ=MY_TIME_ZONE \
  -v /PATH_TO_YOUR_CONFIG:/config \
  -v /run/dbus:/run/dbus:ro \
  --network=host \
  ghcr.io/home-assistant/home-assistant:stable
#+end_src

#+begin_quote
- /PATH_TO_YOUR_CONFIG points at the folder where you want to store your configuration and run it. Make sure that you keep the :/config part.

- MY_TIME_ZONE is a tz database name, like TZ=America/Los_Angeles.

- D-Bus is optional but required if you plan to use the Bluetooth integration.
#+end_quote

#+begin_src sh :shebang "#1/bin/bash" :tangle
docker run -d \
  --name homeassistant \
  --privileged \
  --restart=unless-stopped \
  -e TZ=Pacific/Auckland \
  -v /mnt/data:/config \
  -v /run/dbus:/run/dbus:ro \
  --network=host \
  ghcr.io/home-assistant/home-assistant:stable
#+end_src

** Access the Home Assistant dashboard

Once the Docker container is up and running, the Home Assistant dashboard will be accessible using ~http://<host name/host ip network address>:8123/~.

