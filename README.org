#+title: Home Assistant Setup Instructions

This will take us through the steps of setting up Home Assistant on Ubuntu Server.


** Prerequisites

To use these instructions, you'll need Ubuntu Server installed on a machine, as well as SSH access (OpenSSH) to the server.

You'll also need to use the ~apt~ package manager.

You'll also need to install the following (click on the headers for more info):

*** [[https://www.gnu.org/software/gawk/][GAWK]]

I use ~gawk~ for format manipulation of textual standard output, which is useful for formatting output from ~nmap~ (see below) to obtain our server IP address.

#+begin_src bash
# Install gawk via apt
sudo apt-get install gawk -y
#+end_src

*** [[https://nmap.org/][NMAP]]

#+begin_quote
*Note*: This is not required if your server has a static IP.
#+end_quote

I use ~nmap~ to scan my network for IP addresses of connected devices. This is important to provide the server host address to the Pulumi configuration on a network governed by DHCP.

#+begin_src bash
# Install nmap via apt
sudo apt-get install nmap
#+end_src

*** [[https://www.pulumi.com/docs/install/][Pulumi CLI]]

I use ~pulumi~ to manage the home assistant infrastructure and integration stack.

To install a clean version of ~pulumi~, use the following:

#+begin_src bash
# Download and install the Pulumi CLI package
curl -fsSL https://get.pulumi.com | sh

# Verify installation by outputting Pulumi version
pulumi version
#+end_src

#+begin_quote
*Note*: The above code block can also be used to update ~pulumi~.
#+end_quote

*** [[https://github.com/nvm-sh/nvm?tab=readme-ov-file#installing-and-updating][NVM]]

I use Node Version Manager (~nvm~) to manage the install of ~node~ and ~npm~.

#+begin_src bash
# Download and run the installation script
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash

# Verify installation of node by outputting test variable
command -v nvm
#+end_src

#+begin_quote
*Note*: This will install ~nvm~ version 0.39.7. To install a different version, update the version number in the code above. This script will also append some code into ~.bashrc~ so make sure to commit those changes, if necessary.
#+end_quote

*** [[https://www.npmjs.com/][NPM]] and [[https://nodejs.org/en][Node]]

I use ~npm~ to support the installation of any ~typescript~ modules. I use ~node~ as a compiler for ~typescript~ modules.

To install the latest LTS release of ~node~ and ~npm~, use the following code:

#+begin_src bash
# Install latest LTS release of npm and node
nvm install --lts

# Verify installation by outputting npm and node versions
npm -v && node -v
#+end_src

*** [[https://www.typescriptlang.org/][Typescript]]

I use ~typescript~ as the syntax for programming ~pulumi~ and other things.

We can install ~typescript~ globally (across all users) with the following code:

#+begin_src bash
npm install -g typescript
#+end_src

*** TS-Node

I use ~ts-node~ to compile and run ~typescript~ functions from the command line.

Install ~ts-node~ globally with the following:

#+begin_src bash
npm install -g ts-node
#+end_src

** Specification

I'm running Home Assistant on the following specs:
  - Raspberry Pi model 4b
  - Ubuntu Server 64-bit LTS 22.04
  - 3TB SSD mounted storage volume

*** Future updates:

***** TODO Administer infra stack with Pulumi configuration
***** TODO Change from single node infra to multi-node for high-availability.
***** TODO Replace Raspberry Pi with more powerful server hardware.
***** TODO Replace Ubuntu Server with RedHat Enterprise Linux (RHEL).

** Pulumi infrastructure

**** Scaffold and configuration

We must first create and configure the ~typescript~ pulumi project in the CLI. We can do this by passing in the ~--config~ parameter to the ~pulumi new~ command.

#+begin_src bash
# Create the pulumi project and pass in configuration key/value pairs
pulumi new typescript --name "home-assistant" --stack "dev" --secret --config="serverKey=$(cat /path/to/private/ssh/key)" --config="serverIp=$(nmap -n -A <server hostname> -oG - | awk '/Up$/{print $2}')"
#+end_src

#+begin_quote
*Note*: This will create a new typescript pulumi project named ~home-assistant~, a stack named ~dev~, and a configuration file (~Pulumi.dev.yaml~) containing the server SSH key for remote connection as well as the IP address (obtained from ~nmap~) of the server.
#+end_quote

**** Deployment

With the infrastructure and applications to deploy defined within the project (typically ~index.ts~), we can deploy our ~home-assistant~ suite.

#+begin_src bash
# Deploy the pulumi dev stack
pulumi up -y
#+end_src

** Install Docker

To start with, we'll be running our Home Assistant application in a Docker container.

To install Docker, consult the official Docker [[https://docs.docker.com/engine/install/ubuntu/][installation instructions]] for Ubuntu.

For reference: I've installed Docker using their ~apt~ repository.

#+begin_quote
This Docker installation requires root privileges to run Docker containers. To run Docker containers as a non-root user, follow the official Docker [[https://docs.docker.com/engine/install/linux-postinstall/][Linux post-installation instructions]].
#+end_quote

#+begin_quote
Any OCI (Open Container Initiative) compatible runtime can be used to run a Home Assistant container.
#+end_quote

*** Future updates:

***** TODO Replace Docker with a single-node Kubernetes cluster.
***** TODO Install RedHat OpenShift (RHOS) over the top of Kubernetes to better orchestrate the platform.

** Create a Home Assistant Docker container

With Docker installed, we can start Home Assistant in an OCI (Open Container Initiatie) container.

#+begin_src sh :shebang "#!/bin/bash" :notangle
docker run -d \
  --name homeassistant \
  --privileged \
  --restart=unless-stopped \
  -e TZ=MY_TIME_ZONE \
  -v /PATH_TO_YOUR_CONFIG:/config \
  -v /run/dbus:/run/dbus:ro \
  --network=host \
  ghcr.io/home-assistant/home-assistant:stable
#+end_src

#+begin_quote
- /PATH_TO_YOUR_CONFIG points at the folder where you want to store your configuration and run it. Make sure that you keep the :/config part.

- MY_TIME_ZONE is a tz database name, like TZ=America/Los_Angeles.

- D-Bus is optional but required if you plan to use the Bluetooth integration.
#+end_quote

#+begin_src sh :shebang "#1/bin/bash" :tangle
docker run -d \
  --name homeassistant \
  --privileged \
  --restart=unless-stopped \
  -e TZ=Pacific/Auckland \
  -v /mnt/data:/config \
  -v /run/dbus:/run/dbus:ro \
  --network=host \
  ghcr.io/home-assistant/home-assistant:stable
#+end_src

** Access the Home Assistant dashboard

Once the Docker container is up and running, the Home Assistant dashboard will be accessible using ~http://<host name/host ip network address>:8123/~.

